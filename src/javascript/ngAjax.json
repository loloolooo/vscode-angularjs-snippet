{
	"Angular $q": {
		"prefix": "ngq",
		"description": "Angular 1.x $q\n",
		"body": [
			"var deferred = \\$q.defer();",
			"",
			"deferred.resolve(resultObj); //triggers successCallback",
			"deferred.reject(reasonObj); //triggers errorCallback",
			"deferred.notify(progressObj); //triggers progressCallback",
			"",
			"var promise = deferred.promise;",
			"",
			"promise",
			"\t.then(function ${1:successCallback}() {",
			"\t\t",
			"\t}).catch(function ${4:fnFailure}() {",
			"\t\t",
			"\t}).finally(function ${5:fnAlways}() {",
			"\t\t",
			"\t});",
			"",
			"promise",
			"\t.then(function ${1:successCallback}() {",
			"\t\t",
			"\t}, function ${2:errorCallback}() {",
			"\t\t",
			"\t}, function ${3:progressCallback}() {",
			"\t\t",
			"\t});",
			""
		]
	},
	"Angular $q.all": {
		"prefix": "ngqAll",
		"description": "Angular 1.x $q.all\n",
		"body": [
			"\\$q.all([${1:promises}]).then(function (response) {",
			"\t$0",
			"});",
			""
		]
	},
	"Angular $q.race": {
		"prefix": "ngqRace",
		"description": "Angular 1.x $q.race\n",
		"body": [
			"\\$q.race([${1:promises]).then(function (response) {",
			"\t$0",
			"});",
			""
		]
	},
	"Angular $http": {
		"prefix": "ngHTTP",
		"description": "Angular 1.x $http\n",
		"body": [
			"var deferred = \\$q.defer();",
			"\\$http({",
			"\turl: '${url}',",
			"\tmethod: '${METHOD}'",
			"}).then(function (response) {",
			"\t${0}",
			"\tdeferred.resolve(response);",
			"}, function (error) {",
			"\tdeferred.reject(error);",
			"});",
			"return deferred.promise;",
			""
		]
	},
	"Angular $http.get": {
		"prefix": "ngHTTPGet",
		"description": "Angular 1.x $http.get\n",
		"body": [
			"var deferred = \\$q.defer();",
			"\\$http.get('${url}', ${config}).then(function (response){",
			"\t${0}",
			"\tdeferred.resolve(response);",
			"}, function (error) {",
			"\tdeferred.reject(error);",
			"});",
			"return deferred.promise;",
			""
		]
	},
	"Angular $http.post": {
		"prefix": "ngHTTPPost",
		"description": "Angular 1.x $http.post\n",
		"body": [
			"var deferred = \\$q.defer();",
			"\\$http.post('${url}', data, config).then(function (response){",
			"\t${0}",
			"\tdeferred.resolve(response);",
			"}, function (error) {",
			"\tdeferred.reject(error);",
			"});",
			"return deferred.promise;",
			""
		]
	},
	"Angular $http.put": {
		"prefix": "ngHTTPPut",
		"description": "Angular 1.x $http.put\n",
		"body": [
			"var deferred = \\$q.defer();",
			"\\$http.put('${url}', ${config}).then(function (response){",
			"\t${0}",
			"\tdeferred.resolve(response);",
			"}, function (error) {",
			"\tdeferred.reject(error);",
			"});",
			"return deferred.promise;",
			""
		]
	},
	"Angular $http.patch": {
		"prefix": "ngHTTPPatch",
		"description": "Angular 1.x $http.patch\n",
		"body": [
			"var deferred = \\$q.defer();",
			"\\$http.patch('${url}', ${config}).then(function (response){",
			"\t${0}",
			"\tdeferred.resolve(response);",
			"}, function (error) {",
			"\tdeferred.reject(error);",
			"});",
			"return deferred.promise;",
			""
		]
	},
	"Angular $http.delete": {
		"prefix": "ngHTTPDelete",
		"description": "Angular 1.x $http.delete\n",
		"body": [
			"var deferred = \\$q.defer();",
			"\\$http.delete('${url}', ${config}).then(function (response){",
			"\t${0}",
			"\tdeferred.resolve(response);",
			"}, function (error) {",
			"\tdeferred.reject(error);",
			"});",
			"return deferred.promise;",
			""
		]
	},
	"Angular $http.head": {
		"prefix": "ngHTTPHead",
		"description": "Angular 1.x $http.head\n",
		"body": [
			"var deferred = \\$q.defer();",
			"\\$http.head('${url}', ${config}).then(function (response){",
			"\t${0}",
			"\tdeferred.resolve(response);",
			"}, function (error) {",
			"\tdeferred.reject(error);",
			"});",
			"return deferred.promise;",
			""
		]
	},
	"Angular $http.jsonp": {
		"prefix": "ngHTTPJSONP",
		"description": "Angular 1.x $http.jsonp\n",
		"body": [
			"var deferred = \\$q.defer();",
			"\\$http.jsonp('${url}', ${config}).then(function (response){",
			"\t${0}",
			"\tdeferred.resolve(response);",
			"}, function (error) {",
			"\tdeferred.reject(error);",
			"});",
			"return deferred.promise;",
			""
		]
	},
	"Angular Service return a $$api.request promise": {
		"prefix": "apiRequest",
		"description": "Angular 1.x Service $$api.request return a promise\n",
		"body": [
			"function ${requestResource}(${config}) {",
			"\treturn \\$\\$api.request({",
			"\tmethod: '${GET}',",
			"\turl: '${url}',",
			"\tparams: ${config}",
			"});"
		]
	},
	"Angular Service return a $$api.get promise": {
		"prefix": "apiGet",
		"description": "Angular 1.x Service $$api.get return a promise\n",
		"body": [
			"function ${getResource}(${config}) {",
			"\treturn \\$\\$api.get(${url}, ${config});",
			"}",
			""
		]
	},
	"Angular Service return a $$api.post promise": {
		"prefix": "apiPost",
		"description": "Angular 1.x Service $$api.post return a promise\n",
		"body": [
			"function ${postResource}(${data}, ${config}) {",
			"\treturn \\$\\$api.post(${url}, ${data}, ${config});",
			"}",
			""
		]
	},
	"Angular Service return a $$api.put promise": {
		"prefix": "apiPut",
		"description": "Angular 1.x Service $$api.put return a promise\n",
		"body": [
			"function ${putResource}(${data}, ${config}) {",
			"\treturn \\$\\$api.put(${url}, ${data}, ${config});",
			"}",
			""
		]
	},
	"Angular Service return a $$api.patch promise": {
		"prefix": "apiPatch",
		"description": "Angular 1.x Service $$api.patch return a promise\n",
		"body": [
			"function ${patchResource}(${data}, ${config}) {",
			"\treturn \\$\\$api.patch(${url}, ${data}, ${config});",
			"}",
			""
		]
	},
	"Angular Service return a $$api.delete promise": {
		"prefix": "apiDelete",
		"description": "Angular 1.x Service $$api.delete return a promise\n",
		"body": [
			"function ${deleteResource}(${config}) {",
			"\treturn \\$\\$api.delete(${url}, ${config});",
			"}",
			""
		]
	},
	"Angular Service return a $$api.head promise": {
		"prefix": "apiHead",
		"description": "Angular 1.x Service $$api.head return a promise\n",
		"body": [
			"function ${headResource}(${config}) {",
			"\treturn \\$\\$api.head(${url}, ${config});",
			"}",
			""
		]
	},
	"Angular Service return a $$api.jsonp promise": {
		"prefix": "apiJSONP",
		"description": "Angular 1.x Service $$api.jsonp return a promise\n",
		"body": [
			"function ${jsonpResource}(${config}) {",
			"\treturn \\$\\$api.jsonp(${url}, ${config});",
			"}",
			""
		]
	},
	"Angular Controller calls service promise": {
		"prefix": [
			"api",
			"ngAjax"
		],
		"description": "Angular 1.x Controller calls service promise\n",
		"body": [
			"${1:${TM_FILENAME_BASE/^(.)([a-zA-Z0-9]*)([_\\W])(.*)/${1:/downcase}${2}${4:/pascalcase}/}}Service",
			"\t.${2:method}Resource(${3:requestParam})",
			"\t.then(function (response) {",
			"\t\tif (response.data.code == '200') {",
			"\t\t\t\\$scope.${4:data} = response.data.data;",
			"\t\t\t$0",
			"\t\t}",
			"\t}).catch(function (error) {});",
			""
		]
	},
	"Angular AJAX": {
		"prefix": "$$api",
		"description": "Angular 1.x Async Ajax Request Wrapper\n",
		"body": [
			"(function() {",
			"\t'use strict';",
			"",
			"\tangular.module('${1:name}').factory('\\$\\$api', \\$\\$api);",
			"",
			"\t\\$\\$api.inject = ['\\$http', '\\$q'];",
			"",
			"\tfunction \\$\\$api(\\$http, \\$q) {",
			"\t\tvar TYPE_JSON = 'application/json';",
			"\t\tvar TYPE_FORM = 'application/x-www-form-urlencoded'; // url encoded",
			"\t\tvar TYPE_FORM_DATA = 'multipart/form-data';",
			"",
			"\t\t// AngularJS 默认 'Content-Type' 是 application/json ，",
			"\t\t// 通过设置 'Content-Type': undefined，不仅把 Content-Type 设置为 multipart/form-data，还填充上当前的 boundary",
			"\t\t// 如果手动设置为 'Content-Type': multipart/form-data，后台会抛出异常：the request was rejected because no multipart boundary was found",
			"\t\t// boundary 是随机生成的字符串，用来分隔文本的开始和结束",
			"\t\t// 设置 transformRequest: angular.identity ，anjularjs transformRequest function 将序列化我们的 formdata object，也可以不添加",
			"",
			"\t\tvar TYPE_MULTIPART_FORM_DATA = undefined;",
			"",
			"\t\tvar CONTENT_TYPE_JSON = { 'Content-Type': TYPE_JSON };",
			"\t\tvar CONTENT_TYPE_FORM = { 'Content-Type': TYPE_FORM };",
			"\t\tvar CONTENT_TYPE_FORM_DATA = { 'Content-Type': TYPE_FORM_DATA };",
			"\t\tvar CONTENT_TYPE_MULTIPART_FORM_DATA = {",
			"\t\t\t'Content-Type': TYPE_MULTIPART_FORM_DATA",
			"\t\t};",
			"",
			"\t\tvar queryString = function (params) {",
			"\t\t\tif (params && typeof params === 'object') {",
			"\t\t\t\tvar str = '?' + Object.keys(params)",
			"\t\t\t\t\t.map(function (key) {",
			"\t\t\t\t\t\treturn (encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));",
			"\t\t\t\t\t})",
			"\t\t\t\t\t.join('&');",
			"\t\t\t\treturn str;",
			"\t\t\t}",
			"\t\t\treturn '';",
			"\t\t};",
			"",
			"\t\tfunction _request(\\$\\$method) {",
			"\t\t\tvar deferred = \\$q.defer();",
			"",
			"\t\t\t\\$\\$method",
			"\t\t\t\t.then(function(response) {",
			"\t\t\t\t\tdeferred.resolve(response);",
			"\t\t\t\t})",
			"\t\t\t\t.catch(function(response) {",
			"\t\t\t\t\tdeferred.reject(response);",
			"\t\t\t\t});",
			"",
			"\t\t\treturn deferred.promise;",
			"\t\t}",
			"",
			"\t\tfunction httpRequest(config) {",
			"\t\t\tif (",
			"\t\t\t\tconfig.method.toLowerCase() === 'get' &&",
			"\t\t\t\ttypeof config.data === 'object'",
			"\t\t\t) {",
			"\t\t\t\tconfig.url += queryString(config.data);",
			"\t\t\t}",
			"\t\t\tvar \\$\\$method = \\$http(config);",
			"",
			"\t\t\treturn _request(\\$\\$method);",
			"\t\t}",
			"",
			"\t\tfunction getRequest(url, config) {",
			"\t\t\tif (typeof config === 'object') {",
			"\t\t\t\turl += queryString(config);",
			"\t\t\t}",
			"",
			"\t\t\tvar \\$\\$method = \\$http.get(url);",
			"",
			"\t\t\treturn _request(\\$\\$method);",
			"\t\t}",
			"",
			"\t\tfunction postRequest(url, data, config) {",
			"\t\t\tvar \\$\\$method =",
			"\t\t\t\ttypeof config !== 'undefined'",
			"\t\t\t\t\t? \\$http.post(url, data, config)",
			"\t\t\t\t\t: \\$http.post(url, data);",
			"",
			"\t\t\treturn _request(\\$\\$method);",
			"\t\t}",
			"",
			"\t\tfunction putRequest(url, data, config) {",
			"\t\t\tvar \\$\\$method =",
			"\t\t\t\ttypeof config !== 'undefined'",
			"\t\t\t\t\t? \\$http.put(url, data, config)",
			"\t\t\t\t\t: \\$http.put(url, data);",
			"",
			"\t\t\treturn _request(\\$\\$method);",
			"\t\t}",
			"",
			"\t\tfunction patchRequest(url, data, config) {",
			"\t\t\tvar \\$\\$method =",
			"\t\t\t\ttypeof config !== 'undefined'",
			"\t\t\t\t\t? \\$http.patch(url, data, config)",
			"\t\t\t\t\t: \\$http.patch(url, data);",
			"",
			"\t\t\treturn _request(\\$\\$method);",
			"\t\t}",
			"",
			"\t\tfunction deleteRequest(url, config) {",
			"\t\t\tvar \\$\\$method =",
			"\t\t\t\ttypeof config !== 'undefined'",
			"\t\t\t\t\t? \\$http.delete(url, config)",
			"\t\t\t\t\t: \\$http.delete(url);",
			"",
			"\t\t\treturn _request(\\$\\$method);",
			"\t\t}",
			"",
			"\t\tfunction headRequest(url, config) {",
			"\t\t\tvar \\$\\$method =",
			"\t\t\t\ttypeof config !== 'undefined'",
			"\t\t\t\t\t? \\$http.head(url, config)",
			"\t\t\t\t\t: \\$http.head(url);",
			"",
			"\t\t\treturn _request(\\$\\$method);",
			"\t\t}",
			"",
			"\t\tfunction jsonpRequest(url, config) {",
			"\t\t\tvar \\$\\$method =",
			"\t\t\t\ttypeof config !== 'undefined'",
			"\t\t\t\t\t? \\$http.jsonp(url, config)",
			"\t\t\t\t\t: \\$http.jsonp(url);",
			"",
			"\t\t\treturn _request(\\$\\$method);",
			"\t\t}",
			"",
			"\t\tfunction allRequest(promises) {",
			"\t\t\treturn \\$q.all(promises);",
			"\t\t}",
			"",
			"\t\tfunction raceRequest(promises) {",
			"\t\t\treturn \\$q.race(promises);",
			"\t\t}",
			"",
			"\t\tfunction isJson(str) {",
			"\t\t\tif (typeof str !== 'string') {",
			"\t\t\t\treturn false;",
			"\t\t\t}",
			"",
			"\t\t\ttry {",
			"\t\t\t\tvar result = JSON.parse(str);",
			"\t\t\t\tvar type = Object.prototype.toString.call(result);",
			"\t\t\t\treturn type === '[object Object]' || type === '[object Array]';",
			"\t\t\t} catch (err) {",
			"\t\t\t\treturn false;",
			"\t\t\t}",
			"\t\t}",
			"",
			"\t\tfunction checkResponse (response) {",
			"\t\t\tresponse.checked = false;",
			"\t\t\tresponse.message = '';",
			"",
			"\t\t\t// var code = status && status.match(/^\\d+/)[0];",
			"\t\t}",
			"",
			"",
			"\t\treturn {",
			"\t\t\trequest: httpRequest,",
			"\t\t\tget: getRequest,",
			"\t\t\tpost: postRequest,",
			"\t\t\tput: putRequest,",
			"\t\t\tpatch: patchRequest,",
			"\t\t\tdelete: deleteRequest,",
			"\t\t\thead: headRequest,",
			"\t\t\tjsonp: jsonpRequest,",
			"\t\t\tall: allRequest,",
			"\t\t\trace: raceRequest,",
			"\t\t\tisJson: isJson,",
			"\t\t\tcheckResponse: checkResponse,",
			"\t\t\tTYPE_JSON: TYPE_JSON,",
			"\t\t\tTYPE_FORM: TYPE_FORM,",
			"\t\t\tTYPE_FORM_DATA: TYPE_FORM_DATA,",
			"\t\t\tTYPE_MULTIPART_FORM_DATA: TYPE_MULTIPART_FORM_DATA,",
			"\t\t\tCONTENT_TYPE_JSON: CONTENT_TYPE_JSON,",
			"\t\t\tCONTENT_TYPE_FORM: CONTENT_TYPE_FORM,",
			"\t\t\tCONTENT_TYPE_FORM_DATA: CONTENT_TYPE_FORM_DATA,",
			"\t\t\tCONTENT_TYPE_MULTIPART_FORM_DATA: CONTENT_TYPE_MULTIPART_FORM_DATA",
			"\t\t};",
			"\t}",
			"})();",
			""
		]
	}
}